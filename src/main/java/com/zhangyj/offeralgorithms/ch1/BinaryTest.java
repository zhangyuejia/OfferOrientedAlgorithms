package com.zhangyj.offeralgorithms.ch1;

/**
 * 二进制运算
 */
public class BinaryTest {

    public static void main(String[] args) {
        System.out.println("===========十进制正负整数二进制转换===============");
        // 正数的补码与其原码相同；
        // 负数的补码通过以下步骤得到：1.先得到其绝对值的原码 2.将原码的所有位取反（0变成1，1变成0）；3.对取反后的结果加1。
        // 5 -> 0b101
        System.out.println("5的二进制：" + Integer.toBinaryString(5 ));
        System.out.println("0b101的十进制：" + 0b101);
        // -5 -> 0b00000101 -> 0b11111010 -> 0b11111011（int为32位，实际上为11111111111111111111111111111011）
        System.out.println("-5的二进制：" + Integer.toBinaryString(-5 ));
        // 0b11111111111111111111111111111011
        System.out.println("0b11111111111111111111111111111011的十进制：" +0b11111111111111111111111111111011);

        System.out.println("===========二进制运算符：非、与、或、异或===============");
        // 非运算 按位取反 0b00000101 -> 0b11111010（负数，补码表示）-> 取反+1 -> 0b101 +1（即6） -> -6
        System.out.println("非运算!5："  + ~5);
        // 与运算，同1才为1 0b00000101 & 0b00000110 -> 0b00000100（即4）
        System.out.println("与运算5&6："+ (5&6));
        // 或运算，有1即为1 0b00000101 & 0b00000110 -> 0b00000111（即7）
        System.out.println("或运算5|6："+ (5|6));
        // 异或运算，不同（异）即为1 0b00000101 ^ 0b00000110 -> 0b00000011（即3）
        System.out.println("异或运算5^6："+ (5^6));

        System.out.println("===========二进制移位运算 左移 右移===============");
        // 左移，右边补0即可
        // 5左移2位 0b000000101 -> 0b000010100 -> 20
        System.out.println("5左移2位：" + (5 << 2));
        // -5左移2位 0b11111011 -> 0b11101100 -> 取反（0b00010011）+1 -> -20
        System.out.println("-5左移2位：" + (-5 << 2));

        // 右移，左边补符号位（正数为0，负数为1） 无符号右移：左边补0
        // 5右移2位 0b000000101 -> 1
        System.out.println("5右移2位：" + (5 >> 2));
        // -5右移2位 0b11111011 -> 0b11111110 -> 取反（0b00000001）+1 -> -2
        System.out.println("-5右移2位：" + (-5 >> 2));
        // -5无符号右移2位 0b11111111111111111111111111111011 -> 0b00111111111111111111111111111110
        System.out.println("-5右移2位：" + (-5 >>> 2));
        System.out.println(0b00111111111111111111111111111110);

    }
}
